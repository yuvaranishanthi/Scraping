# -*- coding: utf-8 -*-
"""diabetes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xJKOh1F5UDwcHvm6GksniXV6AWTNwF1I
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

!pip install scikit-learn

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

from google.colab import files
uploaded=files.upload()

df=pd.read_csv('diabetes.csv')
print(df.head())

x=df.drop('outcome',axis=1)
y=df['outcome']

sns.countplot(x='outcome',data=df)

sns.boxplot(data=df[['Glucose', 'Age','Insulin', 'DiabetesPedigreeFunction','BMI', 'Pregnancies', 'BloodPressure']])

def find_outliers_in_columns(df, columns):
  outliers_dict = {}

  for column in columns:
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    Q1_scale = Q1 - 1.5 * IQR
    Q3_scale = Q3 + 1.5 * IQR

    outliers = df[(df[column] < Q1_scale) | (df[column] > Q3_scale)]

    outliers_dict[column] = outliers
  return outliers_dict
columns_to_check = ['Glucose', 'Age','Insulin', 'DiabetesPedigreeFunction','BMI', 'Pregnancies', 'BloodPressure']

outliers_by_column = find_outliers_in_columns(df, columns_to_check)

for column, outliers in outliers_by_column.items():
  print(f"Outliers in column '{column}':\n{outliers}\n")

sns.pairplot(x)

df.isnull().sum()

x = df.drop(columns=['SkinThickness'], errors='ignore')
print(x)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.4, random_state=32)

scaler = StandardScaler()
X_train = scaler.fit_transform(x_train)
X_test = scaler.transform(x_test)

from sklearn.linear_model import LogisticRegression

model = LogisticRegression(multi_class='ovr', penalty='l2', C=1.0)
model.fit(x_train, y_train)

y_pred = model.predict(x_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

comparison_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
print(comparison_df.head(10))

