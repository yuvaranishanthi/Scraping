# -*- coding: utf-8 -*-
"""Task2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jK8HuxC19tDmEssGPZCwRafoXUuLVz-x
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from google.colab import files
uploaded=files.upload()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

df=pd.read_csv("diabetes.csv")

print("First 5 records:\n", df.head(10))

print("\nTarget variable distribution:\n", df['outcome'].value_counts())

x = df.drop('outcome', axis=1)
y = df['outcome']

sns.countplot(x='outcome',data=df)

sns.boxplot(data=df[['Glucose', 'Age','Insulin', 'DiabetesPedigreeFunction','BMI', 'Pregnancies', 'BloodPressure']])

def find_outliers_in_columns(df, columns):
  outliers_dict = {}

  for column in columns:
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    Q1_scale = Q1 - 1.5 * IQR
    Q3_scale = Q3 + 1.5 * IQR

    outliers = df[(df[column] < Q1_scale) | (df[column] > Q3_scale)]

    outliers_dict[column] = outliers
  return outliers_dict

columns_to_check = ['Glucose', 'Age','Insulin', 'DiabetesPedigreeFunction','BMI', 'Pregnancies', 'BloodPressure']

outliers_by_column = find_outliers_in_columns(df, columns_to_check)

for column, outliers in outliers_by_column.items():
  print(f"Outliers in column '{column}':\n{outliers}\n")

df.isnull().sum()

plt.figure(figsize=(8, 6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', linewidths=0.5)
plt.title("Correlation Heatmap")
plt.show()

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

scaler=StandardScaler()
X_train_scaled=scaler.fit_transform(X_train)
X_test_scaled=scaler.transform(X_test)

model=LogisticRegression()
model.fit(X_train_scaled,y_train)

y_pred=model.predict(X_test_scaled)

print('\n Accuracy:',accuracy_score(y_test,y_pred))
print('\n Confusion Matrix:\n',confusion_matrix(y_test,y_pred))
print('\n Classification Report:\n',classification_report(y_test,y_pred))